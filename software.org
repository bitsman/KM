#+title: 软件 
#+author: 比克曼
#+latex_class: org-latex-pdf 
#+latex: \newpage 

* 语言
** C语言
*** 宏定义特殊用法
- 从注释来看是把x转换成字符串。
#+begin_src c
	/*
	 * Macros to transform values
	 * into environment strings.
	 */
	#define XMK_STR(x)    #x
	#define MK_STR(x)    XMK_STR(x)
#+end_src
找到了相关的资料，解读了这个define，还顺便认识了另外两个不常用的define
#+begin_src c
	#define Conn(x,y) x##y
	#define ToChar(x) #@x
	#define ToString(x) #x
#+end_src
x##y表示什么？表示x连接y，举例说：
#+begin_src c
    int  n = Conn(123,456);  //结果就是n=123456;
    char* str = Conn("asdf", "adf")//结果就是 str = "asdfadf";
#+end_src
再来看#@x，其实就是给x加上单引号，结果返回是一个const char。举例说：char a = ToChar(1);结果就是a='1';做个越界试验char a
= ToChar(123);结果是a='3'; 但是如果你的参数超过四个字符，编译器就给给你报错了！error C2015: too many characters in
constant; 最后看看#x,估计你也明白了，他是给x加双引号
#+begin_src c
    char* str = ToString(123132);//就成了str="123132";
#+end_src
- 宏调试接口
#+begin_src c
#pragma diag_suppress 174 //抑制警告
#ifdef DEBUG
#define printfdbg printf
#else
#define printfdbg /\
/printfdbg
#endif
#+end_src
*** 位操作
- 将最右侧0改为1：
  #+begin_src c
    x|(x+1) 
  #+end_src
- 计算绝对值
  #+begin_src c
    int abs( int x ) 
    {
        int y ;
        y = x >> 31 ;
        return (x^y)-y ;//or: (x+y)^y
    }
  #+end_src
- 符号函数
  #+begin_src c
    int sign(int x)
    {
        return (x>>31) | (unsigned(-x))>>31 ;//x=-2^31时失败(^为幂)
    }
  #+end_src
  1. sign(x) = -1, 则x<0;
  2. sign(x) = 0, 则x==0 ;
  3. sign(x) = 1, 则x>0
- 三值比较
  #+begin_src c
    int cmp( int x, int y )
    {
        return (x>y)-(x-y) ;
    }
  #+end_src
  1. cmp(x,y) = -1, 则x<y;
  2. cmp(x,y) = 0, 则x==y;
  3. cmp(x,y) = 1, 则x > y；
- 不使用第三方交换x,y
  #+begin_src c
    x ^= y ; y ^= x ; x ^= y ;
    x = x+y ; y = x-y ; x = x-y ;
    x = x-y ; y = y+x ; x = y-x ;
    x = y-x ; x = y-x ; x = x+y ; 
  #+end_src
- 统计1位的数量
  #+begin_src c
    int pop(unsigned x)
    {
        x = x-((x>>1)&0x55555555) ;
        x = (x&0x33333333) + ((x>>2) & 0x33333333 ) ;
        x = (x+(x>>4)) & 0x0f0f0f0f ;
        x = x + (x>>8) ;
        x = x + (x>>16) ;
        return x & 0x0000003f ;
    }
  #+end_src
- 位反转
  #+begin_src c
    unsigned rev(unsigned x)
    {
        x = (x & 0x55555555) << 1 | (x>>1) & 0x55555555 ;
        x = (x & 0x33333333) << 2 | (x>>2) & 0x33333333 ;
        x = (x & 0x0f0f0f0f) << 4 | (x>>4) & 0x0f0f0f0f ;
        x = (x<<24) | ((x&0xff00)<<8) | ((x>>8) & 0xff00) | (x>>24) ;
        return x ;
    }
  #+end_src
- 二进制码到GRAY码的转换
  #+begin_src c
    unsigned B2G(unsigned B )
    {
        return B ^ (B>>1) ;
    }
  #+end_src
- GRAY码到二进制码
  #+begin_src c
    unsigned G2B(unsigned G)
    {
        unsigned B ;
        B = G ^ (G>>1) ;
        B = G ^ (G>>2) ;
        B = G ^ (G>>4) ;
        B = G ^ (G>>8) ;
        B = G ^ (G>>16) ;
        return B ;
    }
  #+end_src
*** 嵌入式
- printf调试：可以如下步骤
  #+begin_src c
  #include "uart.h"//串口发送单个字符的API
  #include "stdio.h"//里面有FILE结构体声明
  #pragma import(__use_no_semihosting_swi)//半主机模式
  struct __FILE//stdio.h里面的FILE结构体声明需要
  {
    int handle;
  };
  FILE __stdout, __stderr;//选用，如果需要分别输出

  int fputc(int ch, FILE *f)//printf最终调用的接口
  {
    uart_put((unsigned char)ch);
    return ch;
  }
  #+end_src  
** JAVA语言
** PYTHON语言
*** numpy
- array矩阵的max和min静态属性：比如array矩阵data=array([[1, 5, 3], [8, 6, 1], [9, 0, 4], [4, 6, 5]]), data.min(0) 和
  data.max(0)是从每列中获取的min和max，组成一个向量，data.min(1) 和data.max(1)是从每行中获得min和max；
- 指数e：numpy.exp()可以表示，但是是函数，math.exp()也是，scipy.exp()也是，
  numpy.e和math.e和scipy.e则是一个float型量了。
- 复数：可以表示成1+3j，3和j之间不能相隔，3必须为实数不能是符号，j必须在3之
  后，也可以使用numpy.complex(1, 3)构成1+3j, 同理也就可以构成
  numpy.complex(1, numpy.pi)即\(e^{1+pi j}\)，复数的角度用numpy.angle()计算
*** matplotlib
此包注意用于画图

**** 画XY轴离散点图
1. 先获得x,y的取值范围，比如x=numpy.arange(0, 10), y=numpy.arange(3, 10), 其个数要一致；
2. 倒入画图包：import matplotlib.pyplot as plt；
3. 开始画图：plt.plot(x, y, 'o-'), 第3个参数用于对点进行标注；
4. 设置标题：plt.title('x, y test')
5. 设置X轴说明：plt.xlabel('x label')
6. 设置y轴说明：plt.ylabel('y label')
7. 显示图：plt.show()


